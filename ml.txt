# X = -1, 0, 1, 2, 3, 4
# Y = -3, -1, 3, 5, 7     Y = 2X - 1

model = keras.Sequential([keras.layers.Dense(units=1, input_shape = [1])])     #define o modelo entre si
# modelo é uma rede neural treinada, nesse caso so tem 1 camada ^^^^, com 1 neuronio (units=1)
# aumentamos 1 unico valor na rede neural que é o x prevendo o y

model.compile(optimizer='sgd', loss = 'mean_squared_error')
#otimizador e perda, suposicao sobre a relação entre os numeros, calcula o quao boa ou ruim essa suposicao é pela perda(loss)
#usara a funcao otimizadora para gerar outro palpite

xs = np.array([-1.0, 0.0, 1.0, 2.0, 3.0, 4.0], dtype=float)
ys = np.array([-3.0, -1.0, 3.0, 5.0, 7.0], dtype=float)

#os dados sao configurados como uma matriz x e y

model.fit(xs, ys, epochs = 500)
# passara por esse looping 500 vezes, fazendo um palpite, calculando quao preciso é esse palpite, usando o otimizador para melhorar

print(model.predict([10.0]))
#prevendo y para x = 10
